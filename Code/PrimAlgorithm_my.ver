#include<iostream>
#include<queue>
using namespace std;
class TRI {
public:
	int fir, sec, weight;
};
struct compare {
	bool operator ()(const TRI& m1, const TRI& m2) {
		return m1.weight > m2.weight;
	}
};
int visited[1001] = { 0 };//최대노드 1000개
vector<pair<int,int>> vec[1001];
priority_queue<TRI,vector<TRI>,compare> heap;

int main() {
	int nodeset, edgeset;
	cin >> nodeset >> edgeset;
	int temp1, temp2, temp3;
	TRI tri;
	for (int i = 0; i < edgeset; i++) {
		cin >> temp1 >> temp2 >> temp3;
		vec[temp1].push_back({ temp2, temp3 });
		vec[temp2].push_back({ temp1,temp3 });
		//cin >> tri.fir >> tri.sec>> tri.weight;
		//heap.push(tri);
		
	}
	cout << endl << endl << endl;

	for (int i = 0; i < vec[1].size(); i++) {
		tri.fir = 1;
		tri.sec = vec[1][i].first;
		tri.weight = vec[1][i].second;
		heap.push(tri);
		visited[1] = 1;
	}
	while (!heap.empty()) {
		TRI focusnode =heap.top();//조건이 필요해보인다
		if (visited[focusnode.fir] == 1 && visited[focusnode.sec] == 1) {
			heap.pop();
			continue;
		}
		else{
			cout << "select : " << heap.top().fir << " " << heap.top().sec << " " << heap.top().weight << endl;
			heap.pop();
		}
		
		for (int i = 0; i < vec[focusnode.sec].size(); i++) {
			if (visited[vec[focusnode.sec][i].first] == 0|| visited[vec[focusnode.sec][i].second] == 0) {
				tri.fir = focusnode.sec;
				tri.sec = vec[focusnode.sec][i].first;
				tri.weight = vec[focusnode.sec][i].second;
				heap.push(tri);
				visited[focusnode.sec] = 1;
			}
		}
		
	}
}

/*
5 10
	1 2 10
	2 3 1
	1 5 6
	1 4 5
	2 4 4
	2 4 3
	3 4 2
	3 5 4
	3 5 6
	4 5 2
	*/
