#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
class TRI {//tree
public:
	int a, b, w;//weight

};
class PQ {
public:

	int n;//size
	TRI Arr[1000];
	PQ();
	TRI Delete();
	void insert(TRI x);
	int isEmpty();

};
PQ::PQ() {
	n = 0;

}
int PQ::isEmpty() {
	return n == 0;
}

void PQ::insert(TRI x) {
	int i, temp;
	Arr[n + 1] = x;//0안쓸거임
	i = n + 1;
	n = n + 1;
	while (i > 1 && Arr[i].w < Arr[i / 2].w) {
		swap(Arr[i], Arr[i / 2]);//오 err안난다
		i = i / 2;

	}

}

TRI PQ::Delete() {
	TRI ret = Arr[1];
	int i, j;

	if (n == 1) {
		n = 0;
		return ret;
	}
	Arr[1] = Arr[n];
	i = 1;
	n = n - 1;
	while (1) {
		if (i * 2 > n) {//자식이 없다
			break;
		}
		else if (i * 2 + 1 > n) {//왼쪽 child만 있다
			if (Arr[i * 2].w < Arr[i].w) {
				swap(Arr[i * 2], Arr[i]);
				i = i * 2;
			}
			else {
				break;
			}

		}
		else {//둘다 자식이 있다
			if (Arr[i].w > Arr[i * 2].w && Arr[i].w > Arr[i * 2 + 1].w) {
				if (Arr[i * 2].w < Arr[i * 2 + 1].w)
					j = i * 2;
				else
					j = i * 2 + 1;
				swap(Arr[i], Arr[j]);
				i = j;
			}
			else if (Arr[i].w > Arr[i * 2].w && Arr[i].w <= Arr[i * 2 + 1].w) {
				j = i * 2;
				swap(Arr[i], Arr[j]);
				i = j;
			}
			else if (Arr[i].w <= Arr[i * 2].w && Arr[i].w > Arr[i * 2 + 1].w) {
				j = i * 2 + 1;
				swap(Arr[i], Arr[j]);
				i = j;
			}
			else {
				break;
			}
		}
	}
	return ret;
}

PQ Q;

int n, m;//n은 노드의개수 m은 엣지 개수
vector<pair<int, int>>Edges[1000];
int M[1000];//정답short path 의길이
vector <int> P[1000];//pre
//int M[1000];//노드 마크
int main() {
	int c, s, i, a, b, w;
	TRI x, y;
	cin >> n >> m;
	for (i = 0; i < m; i++) {
		cin >> a >> b >> w;
		Edges[a].push_back({ b,w });
		Edges[b].push_back({ a,w });

	}
	for (i = 1; i <= n; i++) {
		M[i] = 1000000;
	}
	c = 1;
	M[c] = 0;
	for (i = 0; i < Edges[c].size(); i++) {
		x.a = c;
		x.b = Edges[c][i].first;
		x.w =M[c]+ Edges[c][i].second;
		cout << x.w << endl;
		Q.insert(x);

	}

	while (Q.isEmpty() == 0) {
		
		cout << endl;
		y = Q.Delete();
		if (M[y.b] < 1000000) {//더작은게 나왔다면 무시한다 근데 가장 작은 것을 선택했으므로 그런결과가 나올수 없음
			if (M[y.b]==y.w) {
				cout << "Edge from Node " << y.a << "to Node " << y.b << "of Total Path Lengh " << y.w << "ADDED" << "Previous nmode" << y.a << endl;
				P[y.b].push_back(y.a);
			}
			else{
				cout << "Ignored Edge from Node " << y.a << "to Node " << y.b << "of Total Path Lengh " << y.w << "is Selected" << endl;
			}
		}
		else {
			
			cout << endl;
			cout << "Edge from Node " << y.a << "to Node " << y.b << "of Total Path Lengh " << y.w << "is Selected" <<"Prebious nmode" <<y.a<< endl;
			c = y.b;

		//	cout << "M[c]" << c << endl;
			M[c] = y.w;
			P[c].push_back( y.a);
			for (i = 0; i < Edges[c].size(); i++) {
				x.a = c;
				x.b = Edges[c][i].first;
				x.w = M[c] + Edges[c][i].second;
				Q.insert(x);
			}
		}
	}



	/*
	3 3
	1 2 1
	2 3 4
	1 3 2*/
	/*
	5 10
	1 2 10
	2 3 1
	1 5 6
	1 4 5
	2 4 4
	2 4 3
	4 5 2
	3 4 9
	3 5 4
	5 3 6

	

	5 10
	1 2 10
	2 3 1
	1 5 7
	1 4 5
	2 4 4
	2 4 3
	4 5 2
	3 4 9
	3 5 2
	5 3 6

	*/
	/*TRI s[100] = {
		{1,2,3},{4,5,6},{2,2,4},{4,2,1},{4,2,2},{4,6,8}
	};

	TRI t;
	Q.insert(s[0]);
	Q.insert(s[1]);
	Q.insert(s[2]);
	Q.insert(s[3]);
	Q.insert(s[4]);
	Q.insert(s[5]);
	t = Q.Delete();
	cout << "Delected " << t.a << t.b << t.w;*/

	return 0;
}
