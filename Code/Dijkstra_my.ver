#include<iostream>
#include<queue>
using namespace std;
class TRI {
public:
	int fir, sec, weight;
};
struct compare {
	bool operator ()(const TRI& m1, const TRI& m2) {
		return m1.weight > m2.weight;
	}
};
int visited[1001] = { 0 };//최소길이를 저장
vector<pair<int, int>> vec[1001];
priority_queue<TRI, vector<TRI>, compare> heap;

int main() {
	int nodeset, edgeset;
	cin >> nodeset >> edgeset;
	int temp1, temp2, temp3;
	TRI tri;
	for (int i = 0; i < edgeset; i++) {
		cin >> temp1 >> temp2 >> temp3;
		vec[temp1].push_back({ temp2, temp3 });
		vec[temp2].push_back({ temp1,temp3 });
		visited[i + 1] = 10000;
	}
	cout << endl << endl << endl;

	for (int i = 0; i < vec[1].size(); i++) {
		tri.fir = 1;
		tri.sec = vec[1][i].first;
		tri.weight = vec[1][i].second;
		heap.push(tri);
		visited[1] = 0;
	}

	while (!heap.empty()) {
		TRI focusnode = heap.top();//조건이 필요해보인다
		if (visited[focusnode.sec] < 10000) {//이렇게 할경우 node의 sec값은 도착한다는 의미이여야 한다 출발하는 값이 들어갈경우 err
			if (focusnode.weight==visited[focusnode.sec]) {//중복되는경우
				cout << "the same weight but another path select : previous node: " << heap.top().fir << "end node:  " << heap.top().sec << " weight :" << heap.top().weight << endl;
			}
			else {
				cout << "didn't select: previous node: " << heap.top().fir << " end node: " << heap.top().sec << " weight : " << heap.top().weight << endl;
			}
			heap.pop();
			continue;
		}
		else {
			cout << "select : previous node: " << heap.top().fir << " end node: " << heap.top().sec << " weight : " << heap.top().weight << endl;
			heap.pop();
		}
		visited[focusnode.sec] = focusnode.weight;
		for (int i = 0; i < vec[focusnode.sec].size(); i++) {
				tri.fir = focusnode.sec;
				tri.sec = vec[focusnode.sec][i].first;
				tri.weight = vec[focusnode.sec][i].second+focusnode.weight;
				heap.push(tri);
		}

	}
	cout << "conclusion weight" << endl;
	for (int i = 1; i <= nodeset; i++) {
		cout << i << ": " << visited[i] << endl;
	}
}

/*


	5 10
	1 2 10
	2 3 1
	1 5 7
	1 4 5
	2 4 4
	2 4 3
	4 5 2
	3 4 9
	3 5 2
	5 3 6
	*/
