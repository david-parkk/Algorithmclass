#include<iostream>

using namespace std;
long long arr[6000001] = { 0 };
long long num[1000001] = { 0 };

int N, M, K;//N is number count, M is change count, K is calculate sum count
int count4 = 1;
int treelen = 0;
long long temp1, temp2, temp3;
long long init(int index,int len) {
	treelen++;
	if (len == 1) {
		return arr[index] = num[count4++];
	}
	return arr[index] = init(index * 2, len - (len / 2)) + init((index * 2) + 1, len / 2);
}
long long sum(int node, int start, int end, int left, int right) {
	if (start > right || end < left)
		return 0;
	else if (left <= start && end <= right) {
		return arr[node];
	}
	int temp13 = (start + end)/2;
	return sum(node * 2, start, temp13,left,right) + sum((node * 2) + 1, temp13+1, end,left,right);
}
int update(int node, int start, int end, int index, long long  val) {
	if (start > index || end < index)
		return 0;
	arr[node] += val;
	if (start == end)
		return 0;
	int temp11 = (start + end) / 2;
	update(node * 2, start, temp11, index, val);
	update((node * 2)+1, (temp11+1), end, index, val);
	return 0;
}
int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	cin >> N >> M >> K;
	for (int i = 1; i <= N; i++) {
		cin >> num[i];
	}
	init(1, N);
	for (int i = 1; i <= M + K; i++) {
		cin >> temp1 >> temp2 >> temp3;
		if (temp1 == 1) {//numberchange
			update(1, 1, N, temp2, temp3 - num[temp2]);
			num[temp2] = temp3;
		}
		else {//prefixsum
			cout << sum(1, 1, N, temp2, temp3)<<"\n";
		}
	}
	return 0;
}
